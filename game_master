#!/usr/bin/env python

"""
This file provides simple code for launching the game master server.
"""

import argparse
import logging
import os
import signal
import subprocess
import sys
import threading
import time


def modify_times():
    """
    Get all the files in the deckr directory, and the times at which they
    were last modified.
    """

    watched_files = [os.path.join(root, filename)
                     for root, _, filenames in os.walk('deckr')
                     for filename in filenames]
    return {file: os.path.getmtime(file) for file in watched_files}

def watcher(p):
    """
    Watch all of the files in the deckr directory. If any changes are detected
    send a SIGQUIT to the subprocess and return.
    """

    # Watch all the files
    last_modify = modify_times()

    while True:
        time.sleep(1)
        if modify_times() != last_modify:
            logging.info("Detected a file change, reloading...")
            p.send_signal(signal.SIGQUIT)
            break

def run_with_live_reloader():
    """
    Makes sure this script supports automatic reloading. This is really a hack
    since it reruns the script and appends the noreload option. It then spins
    up a thread to watch all of the files and send a SIGQUIT to the subprocess
    if any files have been changed.
    """

    # Rerun this with noreload
    sys.argv.append('--noreload')
    while True:
        p = subprocess.Popen(sys.argv)

        watcher_thread = threading.Thread(target=watcher, args=(p,))
        watcher_thread.daemon = True
        watcher_thread.run()
        try:
            p.wait()
        except KeyboardInterrupt:
            p.kill() # Make sure we properly clean up.
            return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run the deckr game master server.")
    parser.add_argument('--log', dest='loglevel', help="Set the log level of the server")
    parser.add_argument('--noreload', action='store_false', dest='reload', help="Disable automatic reloading of the server")
    args = parser.parse_args()

    # Set up proper logging
    if args.loglevel is not None:
        numeric_level = getattr(logging, args.loglevel.upper(), None)
        if not isinstance(numeric_level, int):
            raise ValueError('Invalid log level: %s' % args.loglevel)
        logging.basicConfig(level=numeric_level)

    logging.info("Starting game master server with log level %s", args.loglevel.upper())

    # Check for automatic reloading
    if args.reload == True:
        logging.info("Running with live reloading")
        run_with_live_reloader()
        sys.exit(0) # Should never be reached

    # Pass off to the game master server
    while True:
        pass
